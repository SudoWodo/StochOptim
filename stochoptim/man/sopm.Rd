% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/sopm.R
\name{sopm}
\alias{sopm}
\title{sopm}
\usage{
sopm(par, fn, lower, upper, method, control = list(), excl = NULL, ...)
}
\arguments{
\item{par}{Vector. Initial values for the components to be optimized.}

\item{fn}{A function to be minimized, with first argument the vector of
parameters over which minimization is to take place}

\item{lower}{Vector with length of par. Lower bounds for components}

\item{upper}{Vector with length of par. Upper bounds for components}

\item{method}{The method to be used}

\item{control}{The argument is a list that can be used to control the
behavior of the algorithm}

\item{excl}{removes method from ALL method}

\item{...}{allows the user to pass additional arguments to the function "fn"}
}
\value{
par -  parameters for which the minimum values if obtained.

value - the minimum value found

counts - number function call

message - message from the optimizer

convergence -  usually a code describing the convergence
}
\description{
sopm function runs multiple stochastic optimizer with one call.
This is very similar to how optim::opm() works. Under the hood sopm calls
soptim() which does all the work. The function is helpful while
comparing the performance of multiple methods applied to a single objective
function.
}
\details{
Note that arguments after ... must be matched exactly to that of
objective function.

sopm can control the behavior of multiple optimizers with control list.
The control list contains global controls which are understood by almost all
the methods and local control. The local control list is nested inside the
global control list. The name of local control list determines behavior of
which method is changed. see EXAMPLE B and F for more clarity.

The global controls are popsize and maxiter. See example C

The local control list must only contain the controls understood by the
method else it will be ignored with a message and default will be used.

In case where same parameters is used in both local and global. The local
control will be given more priority.

If no controls are passed the default controls are used. The default controls
are specifed in the package from where the method originates. In EXAMPLE A
methods run with default controls.

Parameters which are common between all the optimizer can be passed in the
global control list. see EXAMPLE C

sopm also supports running multiple strategies of single optimizer
see EXAMPLE D where DEoptim uses strategies c(2,3)

To execute all the methods use method = "ALL". See EXAMPLE E
}
\examples{
###################################################
# EXAMPLE A
###################################################
# simple demonstration without any controls
fn <- function(x, a = 10) return(sum(x^2) + a)
dim <- 10
par <- rnorm(dim)
lb <- rep(-20,dim)
ub <- rep(20, dim)
res <- sopm(par = par, fn = fn, lower = lb, upper = ub,
           method = c("DEoptim", "DEoptimR", "GenSA",
           "pso", "adagio_simpleDE"))
res
###################################################
# EXAMPLE B
###################################################

# passing control parameters

control <- list(DEoptim = list(tol = 1e-10, maxiter = 100),
GenSA = list(maxiter = 50, maxiter = 100))
sopm(par = par, fn = fn,lower = lb, upper = ub,
method = c("DEoptim","GenSA") ,control = control)

##################################################
# EXAMPLE C
###################################################

# passing control parameters which are common between methods.

# here maxiter is common between solvers but since GenSA specifically
# defines maxiter for itself it takes precedence.
# Hence maxiter for DEoptim
# will be 100 but for GenSA it will be 50

control <- list(maxiter = 100,
DEoptim = list(tol = 1e-10), GenSA = list(maxiter = 50))
sopm(par = par, fn = fn,lower = lb, upper = ub,
method = c("DEoptim","GenSA") ,control = control)

###################################################
# EXAMPLE D
###################################################
# Running multiple strategy

method <- c("DEoptim", "DEoptimR")
control <- list(popsize = 100, maxiter = 50,
               DEoptim = list(tol = 1e-10, strategy = c(2,3)),
               DEoptimR = list(maxiter = 1000))

res <- sopm(par, fn, lb, ub, method = method, control = control)
print(res)
###################################################
# EXAMPLE E
##################################################
# how to exclude method from method = "ALL"
fn <- function(x, a = 10) return(sum(x^2) + a)
dim <- 10
par <- rnorm(dim)
lb <- rep(-20,dim)
ub <- rep(20, dim)
res <- sopm(par = par, fn = fn, lower = lb, upper = ub,
method = "ALL", excl = c("DEoptimR"))

###################################################
# EXAMPLE F
###################################################
# Passing control parameter individually to each method

fn <- rastrigin <- function(x) {
y <- ( 10 * length(x) + sum(x^2 - 10 * cos(2 * pi * x)))
return(y)
}

D <- 10
lower <- lb <- rep(-5.2, D)
upper <- ub <- rep(5.2, D)
par <- rep(3.3, D)

DEoptim_list = list(
popsize = 10*length(lb),
maxiter = 200*length(lb),
tol  = 1e-10,
trace   = 0)

adagio_simpleDE_list = list(
 popsize  = 70,
 nmax     = 230,
 r        = 0.41,
 confined = TRUE,
 trace    = FALSE)

GenSA_list  = list(maxiter = 100)
pso_list    = list(abstol= 1e-8, hybrid = "improved")
DEoptimR_list = list(tol = 1e-7, trace = FALSE)

control <- list(
 DEoptim = DEoptim_list,
 GenSA = GenSA_list,
 pso = pso_list,
 DEoptimR  = DEoptimR_list,
 adagio_simpleDE = adagio_simpleDE_list)

sopm(par = par,
    fn = fn,
    lower = lb,
    upper = ub,
    method = c("DEoptim", "GenSA","pso","DEoptimR","adagio_simpleDE"),
    control= control)
}
